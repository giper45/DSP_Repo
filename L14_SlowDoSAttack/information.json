{"description":"Study how different Slow DoS attacks work.","goal":"<p>Use the given tools (slowhttptest, slowloris.py, slowdrop.py) to perform a SlowDoS attack and learn its basic principles.</p>\n<p>&nbsp;</p>\n<p>To open firefox_user start a new browser page with the link: 193.20.1.21:5800.</p>\n<p>(To use Slowdrop ask for the resource /bigsize.dat)</p>","solution":"<p>A Denial of Service attack aims to make unavailable services offered by a server. This is accomplished targeting resources of the server (computational resources, memory, connections, etc.) or network (bandwidth, etc.). A particular class of DoS attacks is known as SlowDoS because they try to exploit protocols' timers to overload the server.&nbsp;</p>\n<p>In this scenario, we will see attacks like Slowloris and Slowdrop that aim to take all available server's connections.</p>\n<p>Slowloris is the most common SlowDoS attack. This attack works by sending incomplete requests to the server in order to keep the connection busy. In the case of an HTTP server, Slowloris sends an endless request and, to keep alive the connections, random HTTP header every given seconds. In this way, making enough requests, the attacker seizes all possible connections and prevent a legitimate client to connect to the server.&nbsp;</p>\n<p>Slowloris:</p>\n<p>First Tool: On attacker terminal, use the slowhttptest tool to cause a denial of service on the server with the command:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; <code><strong>$</strong> slowhttptest -u http://193.20.1.20/ -c 150</code></p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp;use the -o and -g options to obtain an HTML report (Note: to view the file you have to download it from the container)</p>\n<p>Second Tool: Enter in the slow_drop_attacks folder and use the slowloris.py script:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; <code><strong>$</strong> python slowloris.py -s 150 -p 80 193.20.1.20</code></p>\n<p>As you may have noticed carrying out the attack with the first tool the service goes down only for a few seconds while using the second one the DoS is persistent. This happen because on the server is enabled a module (reqtimeout_module) that provides timeouts and minimum data rates for receiving requests, so if a request takes too long the connection is closed by the server. The reason why the python script slowloris.py seems to work is that it tries to re-connect every time a connection is closed. Indeed, if you are lucky enough, you may be able to load the web page on the client machine occasionally.</p>\n<p>&nbsp;Another typology of SlowDoS is Slowdrop. It differs from the previous attack because it does not exploit requests but responses. The idea behind Slowdrop is to repeatedly request a specific (possibly large, due to fragmentation needs) resource to the server, hence dropping received packets. This attack is hard to detect because its behavior is similar to a legitimate client on a weak wireless connection.&nbsp;</p>\n<p>In our scenario, we added a resource of 100MB (bigsize.dat) on the server to successfully simulate the attack.</p>\n<p>Slowdrop:&nbsp;</p>\n<p>To perform an attack with random drop style and a drop rate of 80%:</p>\n<p>&nbsp; &nbsp; <code><strong>$</strong> python slowdrop.py&nbsp; -u /bigsize.dat -p 80 -s 150 -DS random -R 0.8 193.20.1.20</code></p>\n<p>To use the deterministic drop style:</p>\n<p>&nbsp; &nbsp; <code><strong>$</strong> python slowdrop.py&nbsp; -u /bigsize.dat -p 80 -s 150 -DS deter -R 5 193.20.1.20</code></p>\n<p>Since this kind of attack makes a complete and valid request, the server's module described above is no more able to cut down the connections.&nbsp;&nbsp;</p>\n<p>It should be noted that the execution of a non distributed Slowdrop attack would be associated to a single IP address, the one of the attacking node: since Slowdrop exploits the TCP protocol to reach the listening daemon on the victim host, connections have to be actually established with the server, and, unlike flooding attacks, IP spoofing activities have to be excluded here, hence exposing the attacking host on the network. Therefore, considering standalone DoS attacks, it&rsquo;s possible to efficiently detect and mitigate a running Slowdrop attack by analyzing clients IP addresses of the received packets. For instance, it&rsquo;s possible to limit the number of simultaneous connections associated to a common IP address, in order to maintain reachability on the server.</p>\n<p>To limit the max number of connections from a single host you can use on server machine:</p>\n<p>&nbsp; &nbsp; <code><strong>$</strong> iptables-legacy -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 20 -j REJECT --reject-with tcp-reset&nbsp;</code></p>\n<p><code>-A&nbsp; INPUT</code>: add a rule to INPUT chain</p>\n<p><code>-p tcp --syn -dport 80</code>: if the incoming tcp packets on port 80 has only syn flag</p>\n<p><code>-m connlimit --connlimit-above 20</code>: use the connection limit extension and set the max number of concurrent connections to 20 from a single host</p>\n<p><code>-j REJECT --reject-with tcp-reset</code>: jump to REJECT and reply with a tcp reset</p>\n<p>If you repeat the attack, you will notice that it is ineffective and the client machine can properly load the page.&nbsp;</p>","author":"gx1"}
