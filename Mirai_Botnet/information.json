{"description":"mirai bonet","goal":"<h3>Mirai Botnet</h3>\n<ol>\n<li>An attacker (botmaster) starts the process by connecting to the Scan/Loader server&nbsp;</li>\n<li>Executing the scanner.c module the Scan/Loader starts to scan the Internet looking for vulnerable IoT devices with Telnet service and ports 23 o 2323 open&nbsp;&nbsp;&nbsp;</li>\n<li>Upon detecting a vulnerable device, the malware attempts to brute force a successful login using a list of 62 known default usernames and passwords. If successful, login credentials and device information are sent back to the C&amp;C server, and will be used later by the Scan/Loader server to login and deliver the malware to the vulnerable device&nbsp;&nbsp;&nbsp;</li>\n<li>An infect command is sent from the C&amp;C server to the Scan/Loader server containing all necessary information such as login details, IP address, hardware architecture.&nbsp;&nbsp;&nbsp;</li>\n<li>The Scan/Loader server uses this information to login and instruct the vulnerable device to tftp or wget to the Scan/Loader server, download and execute the corresponding payload binary. Once executed, the first infected IoT device becomes part of the Mirai botnet and can communicate with the C&amp;C server.&nbsp;&nbsp;&nbsp;</li>\n<li>The botmaster can now issue attack commands, specifying parameters such as attack duration and target&nbsp;&nbsp;&nbsp;</li>\n<li>The bot execute the attack8)&nbsp;&nbsp;&nbsp;</li>\n<li>The first bot now attempts to repeat the infection process and propagate the botnet by scanning the Internet for additional vulnerable IoT devices with Telnet services and ports 23 or 2323 open&nbsp;&nbsp;&nbsp;</li>\n<li>New vulnerable IoT device information is returned to the C&amp;C server&nbsp;&nbsp;&nbsp;</li>\n<li>A new infect command is issued to the Scan/Loader server&nbsp;&nbsp;&nbsp;</li>\n<li>The appropriate infected binary is loaded onto the newly discover vulnerable IoT device</li>\n<li>The relevant attack command is issued from the C&amp;C server</li>\n<li>The attack is executed by the newly infected second bot, in conjunction with the first bot</li>\n<li>Scanning for additional vulnerable IoT devices is repeated to further expand the botnet<br /><br /></li>\n</ol>\n<p><img src=\"https://www.researchgate.net/profile/Christopher_Mcdermott9/publication/329316466/figure/fig1/AS:745697364152331@1554799514851/Mirai-Botnet-Infection-Methodology.png\" alt=\"\" width=\"740\" height=\"350\" /></p>\n<ol>\n<li><strong>C&amp;C</strong>: In the image we have a graphic representation of our docker-compose. As we can see some elements have been assigned a static IP address, this choice was made simply for practical purposes, and we will clarify why later. Using the docker-compose all the elements we see in the figure are instantiated. <br />C&amp;C: Through the command \"telnet 172.20.0.2\" it will be possible to connect to the C&amp;C and be able to know the number of bots present in the network, see what types of attacks can be used and finally be able to perform a real attack. To see what types of attacks are, just send the command \"?\" to the C&amp;C.</li>\n<li><strong>Bot_vittima</strong>: The victim_bot represents a vulnerable IoT device, in fact, as you can see from the Dockerfile of this element, username and password have been set as root: root. In addition, this element will expose port 23 to the outside with the telnet service associated with it. We decided to assign a static IP address to the bot_vittima so that we can immediately search for this address on wireshark and immediately see that the newly infected IoT device also participated in the attack.&nbsp;</li>\n<li><strong>Scanner and bot_n</strong> are based on the same docker image, this is because in this simulation it is possible to manually insert a bot into the network. The bot requires 4 input parameters when it is run: <code>&lt;cnc ip&gt; &lt;local p&gt; &lt;callback ip&gt; &lt;scanner 0/1&gt;</code>\n<ol style=\"list-style-type: lower-alpha;\">\n<li>By instantiating a bot with <code>scanner = 1</code>, we are adding a bot that will scan the network for vulnerable IoT devices (our victim_bot).</li>\n<li>By instantiating a bot with <code>scanner = 0</code>, we are adding a bot that will not scan the network, but will be passively active waiting for commands from the C&amp;C.</li>\n</ol>\n</li>\n<li><strong>Loader:</strong> The loader is the component that will take care of infecting the new vulnerable devices discovered by the scanner. Its IP address is static, because this address must be entered as a callback address for the bot, and therefore must be known a priori.</li>\n<li><strong>Server_vittima</strong>: is obviously the target of our attack and can be contacted at 172.19.0.2. It is based on the httpd docker image and represents a simple webserver that can be contacted on port 1111.<br /><br /><br /></li>\n</ol>","solution":"<h3>How to reproduce the attack scenario</h3>\n<p><strong>Set-up phase for the attack</strong></p>\n<ol>\n<li>Once the laboratory has been initialized, using the command shell of your host, you can contact the C&amp;C via <code>telnet 172.20.0.2</code></li>\n<li>Enter for both username and password: <code>root</code></li>\n<li>Once we enter the C&amp;C we wait for all the bots to be connected to it (by default the laboratory instantiates 30 bots).</li>\n<li>Via DSP connect to the scanner command shell</li>\n<li>From the command shell of the scanner, use the command <code>sh init.sh 1</code></li>\n<li>If all goes well, we will notice that the number of bots connected to our network will be 32, one will be the scanner and the other will be the victim_bot that we will have taken possession of. </li>\n</ol>\n<p>&nbsp;</p>\n<p><strong>Attack phase</strong> </p>\n<ol>\n<li>Using DPS, connect to the bot_n shell.</li>\n<li>From the bot_n command shell, ping the target address of the victim using \"<code>ping 172.19.0.2</code>\".</li>\n<li>Return to the C&amp;C command shell to launch the attack</li>\n<li>Do <code>udpplain 172.19.0.2 30</code></li>\n</ol>\n<p>&nbsp;</p>\n<p><em>From the bot_n command shell we can see how the ping time increases, indicating that the victim server is being stressed by the attack in progress. In this way, the effectiveness of the attack is proven</em>, which, being of the \"flooding\" type, does not necessarily exhaust the server's resources, but slowly makes it unresponsive, \"flooding\" the available bandwidth near the target. In this case, the server is busy handling a lot of TCP synchronization requests and takes longer to respond to simple echo_request icmp.</p>","author":"mdeluca"}
