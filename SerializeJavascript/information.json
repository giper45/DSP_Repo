{"description":"Un laboratorio DSP per lo studio della vulnerabilit√† node-serialize realizzato da Manfredi Ciro e Filippo Perna.","goal":"<p>The goal of this laboratory is to exploit a vulnerability located in node-serialize library v0.0.4, which is used by Node.js for data deserialization/serialization operation. This vulnerability allows the execution of arbitrary code server-side. <br /><br />Data passed to the unserialize() function, in Node.js serialization module, can be exploited to achieve arbitrary code execution by passing a serialized JavaScript object with \"Immediately invoked function expression\" (IIFE). <br /><br />The execution context of this laboratory is described below: <br /><br />We have a server and a client in the same network. <br /><br />The server is equipped with Node.js and Espresso and is listening on port 3000; In the .json package there is the node-serialize module (v0.0.4) (bugged version). The server uses the unserialize() (bugged) function to display the username through a request from the client with a cookie containing a parameter called profile. (You will have to take advantage of this mechanism). <br /><br />The client, instead, contains all the tools you need to execute the attack; In particular we have python, curl, netcat, nano. There is also a python script (node_shell.py) which must be used to generate the payload to be passed in the GET request cookie. (Hint: put the output in a .txt file) <br /><br />The script accepts various parameters as input: <br /><br />-b -&gt; is referred to get_bind_shell function (see the source code) <br /><br />-h server address -&gt; this is the address of the host to attack (used to correctly generate the cookie on file) <br /><br />-p #port -&gt; this is the port on which the launched server will be listening. <br /><br />Here you can find an example: <br />python node_shell.py -b -p 4444 -h 191.20.1.3 </p>","solution":"<p>SOLUTION <br />Once you have started the lab, you need to attach to the client container in order to connect to the client's shell. <br /><br />Now let&rsquo;s start the python script located client side (node_shell.py) with the option -b -h address and -p #port. <br />In this way you are specifying the port number on which the server will listen (in order to execute the commands we&rsquo;ll send to it) and the address in order to generate a valid cookie.&nbsp; <br />This command is used to create the profile value that will be put inside the cookie, after being encoded in base64. <br />The profile value (that will be converted in base64) represents the untrusted code that will be executed server-side.&nbsp; <br />In particular the code in the node_shell.py file let you create a backdoor to open a remote terminal on the server. <br /><br />This will be the command :&nbsp; <br />(python node_shell.py -b -h 191.20.1.3 -p 4444)&gt; cookie.txt <br /><br />Once this is done you will have the payload to make the request via curl. The command used will be: <br /><br />curl -v --cookie path / to / cookie.txt Server address: 3000 (server listening port) -&gt; curl -v --cookie cookie.txt http://191.20.1.3:3000/ in our case <br /><br />So now you have exploited the bug and you need to execute the last command in order to start a console server-side that is listening on port 4444 all the commands you&rsquo;ll send client-side and send you responses.</p>\n<p>You will do this with netcat, in particular with the command: nc addressIpServer shellListenPort -&gt; nc 191.20.1.3 4444 <br /><br />You have now a the remote terminal on the server, and you can run any command you want and view the output client side.</p>\n<p>&nbsp;</p>","author":"Ciro-dsp"}
