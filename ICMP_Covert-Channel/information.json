{"description":"","goal":"<h1>ICMP Covert Channel</h1>\n<p>In this lab you you will own a network using a ICMP Tunnel.</p>\n<h3>Protocol Tunneling</h3>\n<p>When an attacker got a <strong>privilege scalation</strong> on a compromised machine, it would get a<strong> Persistent backdoor</strong> in order to get access even&nbsp;after the vulnerability exploited has been possibly patched.</p>\n<p>A famous tecnique to hide traffic between an hacked host and an attacker's, is the<strong> Potocol Tunneling</strong>: it consists in&nbsp;encapsulating a protocol (say TCP, UDP) in another protocol (DNS, ICMP), allowing detection evasion from poorly configured firewalls.</p>\n<p>An example of Protocol Tunneling is against Wi-Fi Captive Portals. These firewalls often allows DNS (or also ICMP) traffic event to unregistered users: this users can exploit this to create a Tunnel between an unregistered Wi-Fi client and a proxy server of their choice. Every TCP/UDP packet in encapsulated inside a DNS packet and sent to proxy server. The proxy server will de-encapsulate the packet and redirect it to the desired destination (ie, Internet)</p>\n<h3>ICMP</h3>\n<p style=\"text-align: left;\">ICMP's RFC does not specify a fixed payload size in its packets so most firewall implementations are not concernet about whats inside a ICMP packet. Furthermore, it is very unlikely that a firewall blocks ICMP traffic, due to its importance over Routing control. For instane, when a routing loop occurs in a network, IP Packets' TTL will eventually drop to zero: at this point the last router will send an ICMP: Time Exceeded message to the source IP.</p>\n<p style=\"text-align: left;\">Recall that ICMP is used with&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo</em>&nbsp;packets to <strong>Ping</strong> an host and test&nbsp;host reachability across a network. The pinging host sends&nbsp;an&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo&nbsp;</em>packet with <span style=\"text-decoration-line: underline;\">some data</span> to the pinged host, the pinged host will answer with an&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo Reply</em>&nbsp;containing the <span style=\"text-decoration-line: underline;\">same data</span>.</p>\n<p style=\"text-align: left;\"><img src=\"https://raw.githubusercontent.com/Guarrakesh/DSP_Repo/74ebe4397190546b2ec9973ad2bd3d721e9ee3f6/ICMP_Covert-Channel/.images/icmp_packet.png\" alt=\"\" width=\"602\" height=\"365\" /></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<h3 style=\"text-align: left;\">ICMP Tunneling&nbsp;</h3>\n<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">In a ICMP Tunnel,&nbsp;each packet will be&nbsp;injected into an&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo&nbsp;</em>or&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo Reply</em>&nbsp;packet.&nbsp;The network will <strong>see a series of simple ping operations</strong>, but inside there could be, say,&nbsp;</span>a TCP connection...</p>\n<p><img src=\"https://raw.githubusercontent.com/Guarrakesh/DSP_Repo/master/ICMP_Covert-Channel/.images/icmp_tunnel.png\" alt=\"\" width=\"1089\" height=\"386\" /></p>\n<p>&nbsp;</p>\n<h4>Lab</h4>\n<p>In this Lab you have a Kali host attached to the same network of a compromised (and priv. ecalated) host. First, try to scan the network to see if there is some open port or if there is some block in the traffic.</p>\n<p>Then, try to shell into the compromised host and check if there is some usefool tool we can use to communicate.</p>\n<p style=\"text-align: left;\">&nbsp;</p>","solution":"<h3>Scanning</h3>\n<p>First of all, let's shell into the Kali and run <em>ifconfig</em>&nbsp;to see the network configuration.</p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_0.png?raw=true\" alt=\"\" width=\"649\" height=\"340\" /></p>\n<p>Now&nbsp;we can use Fingerprint and Scanning techniques to check if there is some host around here.</p>\n<p>If we run&nbsp;<em>arp-scan&nbsp;</em>through the subnet 193.20.1.0/24 we can see if there is some host responding in the subnet</p>\n<p>&nbsp;</p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_1.png?raw=true\" alt=\"\" width=\"837\" height=\"181\" /></p>\n<p>There is 193.20.1.2 alive.&nbsp;If we try to&nbsp;<strong><em>ping</em></strong> it we see it responds successfully.</p>\n<p>Time to try with a port scanning. Let's run nmap to scan all ports with TCP Syn/Ack technique:</p>\n<p>&nbsp;</p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_2.png?raw=true\" alt=\"\" width=\"1077\" height=\"344\" /></p>\n<p>As we can see. It seems there is no TCP Port open at the host. It could be that effectively there is no TCP service active or maybe the firewall is blocking all TCP connections.</p>\n<p>( Try to make the scan for UDP connections too )&nbsp;</p>\n<p>We now figured out that the host is completely unaccessible through TCP/UDP due to inactive service or firewall blocking.</p>\n<p>To&nbsp;verify that, let's <strong>shell into</strong> the host container and run <em><strong>iptables&nbsp;-L</strong>.</em></p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/host_0.png?raw=true\" alt=\"\" width=\"495\" height=\"241\" /></p>\n<p>In this host, the firewall blocks ALL incoming TCP requests, but allows in/out ICMP.</p>\n<blockquote>\n<p>Note: In a real environment, the firewall could be on another host and acts as a router; furthermore thery are commonly not so simple and there could be some more complex rules; still,<span style=\"text-decoration: underline;\"> it's likely that ICMP is allowed</span></p>\n</blockquote>\n<h3>ICMP Forge</h3>\n<p>Ok lets try to make some ICMP Echo Request and see if, by RFC, in the Echo Reply it returns&nbsp; the same custom payload we sent. We will use <strong>scapy&nbsp;</strong>to forge some custom ICMP packet.&nbsp;</p>\n<p>Let's <strong>run scapy from the hack tools</strong> and attach it to our&nbsp;<em class=\"ng-binding\" style=\"color: #666666; font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif; letter-spacing: 0.1px; box-sizing: border-box;\">icmp_covert-channel_public_network</em></p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/scapy_0.png?raw=true\" alt=\"\" width=\"979\" height=\"347\" /></p>\n<p>Out goals is to see if the target host allows an ICMP packet with custom payload and to do this we recall that an<strong> ICMP Echo Reply contains the same payload of its&nbsp;triggering Echo Request. </strong></p>\n<p>So let's run <em><strong>tcpdump -i eth0 icmp</strong>&nbsp;</em>inside the Kali container to see what hosts responsds. Since we will make the ICMP Echo Requesto from the Scapy host, we will have to <em>spoof&nbsp;</em>the Kali IP inside the Source Ip.</p>\n<p>Now shell into scapy and forge an ICMP request and send it to the host.</p>\n<blockquote>\n<p>Note: with sintax <strong>ip/icmp/b'...'</strong> we are telling scapy to use a IP packet, in which we are encapsulating an ICMP packet and in which we are encapsulating payload data. If you see in introduction, payload is the last field of the ICMP Packet. In a tunneled TCP request, in the payload part an entire TCP&nbsp;segment could be set.</p>\n</blockquote>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/scapy_1.png?raw=true\" alt=\"\" width=\"946\" height=\"199\" /></p>\n<p>Packet sent. Let's see what tcpdump shows us in kali container:</p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_4.png?raw=true\" alt=\"\" width=\"1261\" height=\"205\" /></p>\n<p><strong>Look! The ICMP Echo Reply returns to the source with the same payload we sent.&nbsp;</strong></p>\n<h3><strong>Exploit</strong></h3>\n<p>If you&nbsp;connected the dots, you have already imagined how you can exploit this to estabilish a<strong> Covert channel over ICMP</strong>, in which every <em>raw data&nbsp;</em>or&nbsp;upper-layer protocol (TCP, UDP) is packed inside the ICMP packet, completely transparent to the firewall.</p>\n<p>In a real exploitation, an hacker, once got the privilege escalation on the machine, could use the Covert Channel to create a <strong>persistent backdoor</strong>, through the which communicate with the compromised host even after the exploit is eventually patched.</p>\n<p>Let's connect again to both Host and Kali.</p>\n<ul>\n<li>On Kali, run <strong>python2 client_icmp.py</strong> and when asked, insert the host ip <span style=\"text-decoration: underline;\"><em>193.20.1.2&nbsp;</em></span> - This is what the hacker launches on its machine to connect to a compromised, remote host that is listening for forged ICMP&nbsp;packets.</li>\n<li>On Host, run <strong>python2 listen_icmp.py eth0&nbsp;</strong>- this is what the hacker must launch on the target machine in order to get persistent access. In real world cases, something has to be made to make this listener be launched on every machine startup.</li>\n<li>Type some command, like&nbsp;<strong>ls&nbsp;</strong>on the Kali shell and see the results.</li>\n</ul>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/Kali_5?raw=true\" alt=\"\" width=\"428\" height=\"517\" /></p>\n<p><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/Kali_6.png?raw=true\" alt=\"\" width=\"561\" height=\"567\" /></p>\n<p>As you can see now we can execute command on the remot hosts through our ICMP tunnel. To see whats happening, try to run again tcpdump and see whats in the ICMP Payloads.</p>\n<h3>Where to go from here</h3>\n<p><em>client_icmp.py</em> and <em>listen_icmp.py</em> are very naive implementations of a ICMP Tunnel. This technique firstly appeared in <a href=\"http://phrack.org/issues/49/6.html#article\">Phrack 49 </a>and<a href=\"http://phrack.org/issues/51/6.html#article\"> Phrack 51</a>&nbsp;with the <strong>Loki2</strong> tool (it was the far 1997). More complex&nbsp; tools now exists, that allows to estabilish a complete TCP/UDP communication between the machines in a Covert Channel fashion. <strong>For more details on this tools and on how to defense agains this attack,</strong> see:&nbsp;</p>\n<ul>\n<li><a href=\"https://www.mit.edu/afs.new/sipb/user/golem/tmp/ptunnel-0.61.orig/web/\">https://www.mit.edu/afs.new/sipb/user/golem/tmp/ptunnel-0.61.orig/web/</a></li>\n<li><a href=\"https://www.cynet.com/attack-techniques-hands-on/how-hackers-use-icmp-tunneling-to-own-your-network/\">https://www.cynet.com/attack-techniques-hands-on/how-hackers-use-icmp-tunneling-to-own-your-network/</a></li>\n</ul>","readme":"","author":"guarrakesh"}
