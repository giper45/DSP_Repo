{"description":"","goal":"<h1>ICMP Covert Channel</h1>\n<p>In this lab you you will own a network using a ICMP Tunnel.</p>\n<h3>Protocol Tunneling</h3>\n<p>When an attacker got a <strong>privilege scalation</strong> on a compromised machine, it would get a<strong> Persistent backdoor</strong> in order to get access even&nbsp;after the vulnerability exploited has been possibly patched.</p>\n<p>A famous tecnique to hide traffic between an hacked host and an attacker's, is the<strong> Potocol Tunneling</strong>: it consists in&nbsp;encapsulating a protocol (say TCP, UDP) in another protocol (DNS, ICMP), allowing detection evasion from poorly configured firewalls.</p>\n<p>An example of Protocol Tunneling is against Wi-Fi Captive Portals. These firewalls often allows DNS (or also ICMP) traffic even to unregistered users: this users can exploit this to create a Tunnel between an unregistered Wi-Fi client and a proxy server of their choice. Every TCP/UDP packet is encapsulated inside a DNS packet and sent to proxy server. The proxy server will de-encapsulate the packet and redirect it to the desired destination (ie, Internet)</p>\n<h3>ICMP</h3>\n<p style=\"text-align: left;\">ICMP's RFC does not specify a fixed payload size in its packets and most firewall implementations are not concernet about whats inside a ICMP packet. Furthermore, it is very unlikely that a firewall blocks ICMP traffic, due to its importance over, for example, Routing control. For instance, when a routing loop occurs in a network, IP Packets' TTL will eventually drop to zero: at this point the last router will send an ICMP: Time Exceeded message to the source IP.</p>\n<p style=\"text-align: left;\">Recall that ICMP is used with&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo</em>&nbsp;packets to <strong>Ping</strong> an host and test&nbsp;host reachability across a network. The pinging host sends&nbsp;an&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo&nbsp;</em>packet with <span style=\"text-decoration-line: underline;\">some data</span> to the pinged host, the pinged host will answer with an&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo Reply</em>&nbsp;containing the <span style=\"text-decoration-line: underline;\">same data</span>.</p>\n<p style=\"text-align: left;\"><img src=\"https://raw.githubusercontent.com/Guarrakesh/DSP_Repo/74ebe4397190546b2ec9973ad2bd3d721e9ee3f6/ICMP_Covert-Channel/.images/icmp_packet.png\" alt=\"\" width=\"602\" height=\"365\" /></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<h3 style=\"text-align: left;\">ICMP Tunneling&nbsp;</h3>\n<p><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">In a ICMP Tunnel,&nbsp;each packet will be&nbsp;injected into an&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo&nbsp;</em>or&nbsp;<em style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Echo Reply</em>&nbsp;packet.&nbsp;The network will <strong>see a series of simple ping operations</strong>, but inside there could be, say,&nbsp;</span>a TCP connection...</p>\n<p><img src=\"https://raw.githubusercontent.com/Guarrakesh/DSP_Repo/master/ICMP_Covert-Channel/.images/icmp_tunnel.png\" alt=\"\" width=\"1089\" height=\"386\" /></p>\n<p>&nbsp;</p>\n<h4>Lab</h4>\n<p>In this Lab you have a Kali host attached to the same network of a compromised (and priv. ecalated) host. First, try to scan the network to see if there is some open port or if there is some block in the traffic.</p>\n<p>Then, try to shell into the compromised host and check if there is some usefool tool we can use to communicate.</p>\n<p style=\"text-align: left;\">&nbsp;</p>","solution":"<h3>Scanning</h3>\n<p style=\"font-size: 14px; font-weight: 400;\">First of all, let's shell into the Kali and run&nbsp;<em>ifconfig</em>&nbsp;to see the network configuration.</p>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_0.png?raw=true\" alt=\"\" width=\"649\" height=\"340\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\">Now&nbsp;we can use Fingerprint and Scanning techniques to check if there is some host around here.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">If we run&nbsp;<em>arp-scan&nbsp;</em>through the subnet 193.20.1.0/24 we can see if there is some host responding in the subnet</p>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_1.png?raw=true\" alt=\"\" width=\"837\" height=\"181\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\">There is 193.20.1.2 alive.&nbsp;If we try to&nbsp;<em>ping</em>&nbsp;it we see it responds successfully.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">Time to try with a port scanning. Let's run nmap to scan all ports with TCP Syn/Ack technique:</p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_2.png?raw=true\" alt=\"\" width=\"1077\" height=\"344\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\">As we can see. It seems there is no TCP Port open at the host. It could be that effectively there is no TCP service active or maybe the firewall is blocking all TCP connections.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">( Try to make the scan for UDP connections. )&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">We now figured out that the host is completely unaccessible through TCP/UDP due to inactive service or firewall blocking.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">To see that, let's&nbsp;<strong>shell into</strong>&nbsp;the host container and run&nbsp;<em>iptables</em>&nbsp;to see something interesting.</p>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/host_0.png?raw=true\" alt=\"\" width=\"495\" height=\"241\" />&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">The host firewall blocks all TCP incoming connections, but allows in/out ICMP, as we could imagine.</p>\n<blockquote style=\"font-size: 14px; font-weight: 400;\">\n<p>Note: in a real environment, a firewall could be on another host that acts a router to the internal network. Moreover, firewall rules could be more complex in handling tcp/udp connections.&nbsp;Howover, it's still likely that ICMP is allowed.</p>\n<p>&nbsp;</p>\n</blockquote>\n<h3>ICMP&nbsp;forge</h3>\n<p style=\"font-size: 14px; font-weight: 400;\">So we have ICMP communication enabled, let's try to forge some ICMP packet and see if they effectively are allowed. To see that, we can create a custom&nbsp;<strong>ICMP</strong>&nbsp;packet and send an<strong>&nbsp;Echo Request with some custom&nbsp;payload&nbsp;</strong>. By RFC, an Echo Request triggers an Echo Reply with the&nbsp;<strong>same payload data</strong></p>\n<p style=\"font-size: 14px; font-weight: 400;\">Let's go to&nbsp;<em>hack tools</em>, launch a scapy container and attach it to our&nbsp;<em class=\"ng-binding\" style=\"box-sizing: border-box; color: #666666; font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif; letter-spacing: 0.1px;\">icmp_covert-channel_public_network .&nbsp;</em></p>\n<p style=\"font-size: 14px; font-weight: 400;\"><em class=\"ng-binding\" style=\"box-sizing: border-box; color: #666666; font-family: Roboto, 'Helvetica Neue', Helvetica, Arial, sans-serif; letter-spacing: 0.1px;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/scapy_0.png?raw=true\" alt=\"\" width=\"990\" height=\"351\" /><br /></em></p>\n<p style=\"font-size: 14px; font-weight: 400;\">We want to sniff the Echo Reply from the&nbsp;<em>hos</em>t&nbsp;in order to see the payload content. To do that, let's launch&nbsp;<strong>tcpdump -i eth0 icmp -X&nbsp;</strong>on the Kali container. In the forged ICMP packet, we will set the&nbsp;<strong><em>source IP</em></strong><em>&nbsp;</em>with the Kali IP in to make Host respond to Kali instead of Scapy.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">Let's launch Scapy and create our custom ICMP packet.</p>\n<blockquote style=\"font-size: 14px; font-weight: 400;\">\n<p>Note: the<strong>&nbsp;ip/icmp/b\"...\" t</strong>ells scapy to create an IP packet and encapsulate an ICMP packet inside it. Inside the ICMP packet, as last field, append the payload in binary format.</p>\n</blockquote>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/scapy_1.png?raw=true\" alt=\"\" width=\"946\" height=\"199\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\">Packet sent. Let's go to see what tcpdump shows us.</p>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/kali_4.png?raw=true\" alt=\"\" width=\"1261\" height=\"205\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\"><strong>Look!</strong>&nbsp;The Echo Reply&nbsp;from the Host-&gt;Kali contains the same payload that we sent in the Echo Request. So effectively our ICMP packet with custom payload passes through the firewall.</p>\n<h3>Exploit</h3>\n<p style=\"font-size: 14px; font-weight: 400;\">If you connected the dots, you can imagine now how it's possibile to make a&nbsp;<strong>Covert Channel</strong>&nbsp;through ICMP communication.&nbsp;When a Hacker gains sufficient privileges on the target machine, he would to create a&nbsp;<strong>persistent backdoor</strong>&nbsp;there, in ordere to access to it event after the vulnerability is eventually patched.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">Let's run again shells on Kali and Host container and:</p>\n<ul style=\"font-size: 14px; font-weight: 400;\">\n<li>On Host: Run&nbsp;<strong>python2 listen_icmp.py eth0&nbsp;</strong>- this command is launched on the target machine to listen for incoming ICMP Echo Requests and de-encapsulate payload inside them.</li>\n<li>On Kali: Run&nbsp;<strong>python2 client_icmp.py</strong>&nbsp;and write&nbsp;<strong>193.20.1.2</strong>&nbsp;when&nbsp;prompted - this is the command that an attacker may launch to start to send ICMP packet to target machine.&nbsp;\n<ul>\n<li>write some shell command, like&nbsp;<strong><em>ls</em></strong><em>,&nbsp;</em>and see the results</li>\n</ul>\n</li>\n</ul>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/Kali_5?raw=true\" alt=\"\" width=\"428\" height=\"517\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\"><img src=\"https://github.com/Guarrakesh/DSP_Repo/blob/master/ICMP_Covert-Channel/.images/Kali_6.png?raw=true\" alt=\"\" width=\"561\" height=\"567\" /></p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">We have a shell on the remote host and we can do pretty much everything.&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">There is a database on the same&nbsp;<em>local_network&nbsp;</em>of the host; Once you got access to the host, you have access to the local network. Try to access to database host; maybe you can find something interesting.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">client_icmp.py and listen_icmp.py are naive implementations of what a ICMP Covert channel could do. It appears for the first time in&nbsp;<a href=\"http://phrack.org/issues/49/6.html#article\">Phrack 49&nbsp;</a>and&nbsp;<a href=\"http://phrack.org/issues/51/6.html#article\">Phrack 51&nbsp;</a>&nbsp;with Loki2 tool for ICMP Tunneling - it was the far 1997.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">Today more complex tool exists: they can create and handle several types of protocol messages (TCP, UDP, DNS, etc.). For more details about these tools and how to defense agains ICMP Convert channels, see:</p>\n<ul style=\"font-size: 14px; font-weight: 400;\">\n<li><a href=\"https://www.cynet.com/attack-techniques-hands-on/how-hackers-use-icmp-tunneling-to-own-your-network/\">https://www.cynet.com/attack-techniques-hands-on/how-hackers-use-icmp-tunneling-to-own-your-network/</a></li>\n<li><a href=\"https://www.mit.edu/afs.new/sipb/user/golem/tmp/ptunnel-0.61.orig/web/\">https://www.mit.edu/afs.new/sipb/user/golem/tmp/ptunnel-0.61.orig/web/</a></li>\n</ul>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">An ICMP&nbsp;<strong>listener</strong>&nbsp;must be present on the target machine; this listener must be able extract content of the ICMP packet and do something with it. If the content is a raw shell comand, it executes the shell command. If the content is an upper-layer protocol (TCP/UDP) it must do some more complex things.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">In a real world environment, the listener should be spawned at every startup on the target machine and it is another&nbsp;difficulty that the hacker must overcome.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">Once everything is up; it will be impossibile for a firewall to detect these communications, if it has not been set properly; this is becaus ICMP traffic could not be completely blocked in many case, due to its importanze in the Internet and Routing controlling messages. To wrap-up, ICMP Tunneling could be a real problem for a network administrator.</p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>\n<p style=\"font-size: 14px; font-weight: 400;\">&nbsp;</p>","readme":"","author":"guarrakesh"}
